bool isSmallLetter(char c) {
	return c >= 'a' && c <= 'z';
}

bool isLetter(char c) {
	return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}

int len(char str[]) {
	int size = 0;
	while (str[size] != '\0') {
		size++;
	}
	return size;
}

int copy(char to[], char from[]) {
	if (strlen(to) < strlen(from)) {
		return -1;
	}
	for (int i = 0; i < strlen(from); i++) {
		to[i] = from[i];
	}
	to[strlen(from)] = '\0';
	return 0;
}

void cat(char to[], char from[]) {
	int size = strlen(to);
	for (int i = 0; i < size; i++) {
		to[size + i] = from[i];
	}
}

int cmp(char s1[], char s2[]) {
	int min = strlen(s1) < strlen(s2) ? strlen(s1) : strlen(s2);
	for (int i = 0; i < min; i++) {
		if (s1[i] == s2[i]) {
			continue;
		}
		if (s1[i] < s2[i]) {
			return -1;
		}
		if (s1[1] > s2[i]) {
			return 1;
		}
	}
	return 0;
}

void deleteIntervals(char s1[]) {
	char helper[100];
	int size = 0;
	for (int i = 0; i < strlen(s1); i++) {
		if (s1[i] == ' ' && s1[i+1] == ' ') {
			continue;
		} else {
			helper[size] = s1[i];
			size++;
		}
	}
	for (int i = 0; i < size; i++) {
		s1[i] = helper[i];
	}
	s1[size] = '\0';
}

void sort(int arr[], int size) {
	int minIndex;
	for (int i = 0; i < size - 1; i++) {
		minIndex = i;
		for (int j = i + 1; j < size; j++) {
			if (arr[minIndex] > arr[j]) {
				minIndex = j;
			}
		}
		swap(arr[i], arr[minIndex]);
	}
}

void swapWords(char w1[], char w2[]) {
	char helper[1024];
	strcpy(helper, w1);
	strcpy(w1, w2);
	strcpy(w2, helper);
}

void sortWords(char words[][1024], int size) {
	int minIndex;
	for (int i = 0; i < size - 1; i++) {
		minIndex = i;
		for (int j = i + 1; j < size; j++) {
			if (strcmp(words[minIndex], words[j]) > 0) {
				minIndex = j;
			}
		}
		swap(words[i], words[minIndex]);
	}
}

void printSquareMatrix(int* matrix[], int size) {
	for (int i = 0; i < size; i++) {
		for (int j = 0; j < size; j++) {
			std::cout << matrix[i][j] << " ";
		}
		std::cout << std::endl;
	}
}

bool even(int n) {
	return !(n % 2);
}

int matrixSum(int** matrix, int n) {
	int sum = 0;
	for (size_t i = 0; i < n; i++) {
		for (size_t j = 0; j < n; j++) {
			sum += even(matrix[i][j]) * matrix[i][j];
		}
	}
	return sum;
}

bool isPrime(int n) {
    for (size_t i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

int count(int** matrix, int n) {
    int counter = 0;
    for (size_t i = 0; i < n; i++) {
        for (size_t j = 0; j < n; j++) {
            if (i <= j && isPrime(matrix[i][j])) {
                counter++;
            }
        }
    }
    return counter;
}

int product(int** matrix, int n) {
	int prod = 1;
	for (size_t i = 0; i < n; i++) {
		for (size_t j = 0; j < n; j++) {
			if (contains(matrix[i][j], 1) && i > n - 1 - j) {
				prod *= matrix[i][j];
			}
		}
	}
	return prod;
}

bool contains(int n, int k) {
	if (k < 0 || k > 9) {
		return false;
	}
	while (n > 0) {
		if (n % 10 == k) {
			return true;
		}
		n /= 10;
	}
	return false;
}

int maxRow(int** matrix, int n) {
	int max = INT16_MIN;
	int sum;
	int maxRow;
	for (size_t i = 0; i < n; i++) {
		sum = 0;
		for (size_t j = 0; j < n; j++) {
			sum += matrix[i][j];
		}
		if (sum > max) {
			maxRow = i;
			max = sum;
		}
	}
}

int maxCol(int** matrix, int n) {
	int max = INT16_MIN;
	int sum;
	int maxRow;
	for (size_t i = 0; i < n; i++) {
		sum = 0;
		for (size_t j = 0; j < n; j++) {
			sum += matrix[j][i];
		}
		if (sum > max) {
			maxRow = i;
			max = sum;
		}
	}
}

void copyArray(int* arr1, int* arr2, int n) {
    for (int i = 0; i < n; i++) {
        arr1[i] = arr2[i];
    }
}

void removeRow(int** matrix, int n, int m, int k) {
    for(int i = k; i < n - 1; i++){
        copyArray(matrix[i], matrix[i + 1], m);
    }
    matrix[n - 1] = nullptr;
}

void removeElement(int* arr, int n, int k) {
    int* newarr = new int[n - 1];
    for (int i = 0; i < k; i++) {
        newarr[i] = arr[i];
    }
    for (int i = k; i < n - 1; i++) {
        newarr[i] = arr[i + 1];
    }
    delete[] arr;
    arr = new int[n - 1];
    for (int i = 0; i < n - 1; i++) {
        arr[i] = newarr[i];
    }
    for (int i = 0; i < n - 1; i++) {
        cout << arr[i];
    }
}

void removeColumn(int** matrix, int n, int m, int k) {
    for (int i = 0; i < n; i++) {
        removeElement(matrix[i], m, k);
    }
}

bool equal(int* arr1, int* arr2, int n, int m) {
	bool contains = false;
	int temp;

	for (size_t i = 0; i < n; i++) {
		temp = arr1[i];
		contains = false;
		for (size_t j = 0; j < m; j++) {
			if (arr2[j] == temp) {
				contains = true;
			}
		}
		if (!contains) {
			return false;
		}
	}
	for (size_t i = 0; i < n; i++) {
		temp = arr1[i];
		contains = false;
		for (size_t j = 0; j < m; j++) {
			if (arr2[j] == temp) {
				contains = true;
			}
		}
		if (!contains) {
			return false;
		}
	}
	return true;
}